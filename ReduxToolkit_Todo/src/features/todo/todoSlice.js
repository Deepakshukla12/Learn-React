/*
  This file defines a Redux slice for managing a todo list using Redux Toolkit's createSlice method.

  - The `initialState` contains an array `todos` which stores all todo items.

  - Each todo item is an object with:
      - a unique `id` (generated by nanoid),
      - a `text` string describing the todo,
      - a `completed` boolean indicating if the todo is done.

  - The slice has four reducers (functions that update the state in response to actions):
      1. addTodo:
         - Adds a new todo to the list with the text provided in the action payload.
         - The new todo is assigned a unique id and marked as not completed by default.

      2. removeTodo:
         - Removes a todo from the list based on its id, which is provided in the action payload.

      3. updateTodo:
         - Finds the todo by id (from the payload) and updates its text to the new text provided.

      4. toggleComplete:
         - Finds the todo by id and toggles its `completed` status (true -> false, or false -> true).

  - The slice automatically generates action creators (`addTodo`, `removeTodo`, etc.) which are exported for use in React components.

  - The reducer function is exported as default to be included in the Redux store configuration.
*/
import { createSlice, nanoid } from '@reduxjs/toolkit';

const initialState = {
    todos: []
};

export const todoSlice = createSlice({
    name: 'todo',
    initialState,
    reducers: {
        addTodo: (state, action) => {
            const todo = {
                id: nanoid(),
                text: action.payload,
                completed: false
            };
            state.todos.push(todo);
        },
        removeTodo: (state, action) => {
            state.todos = state.todos.filter((todo) => todo.id !== action.payload);
        },
        updateTodo: (state, action) => {
            const { id, newText } = action.payload;
            const todo = state.todos.find((todo) => todo.id === id);
            if (todo) {
                todo.text = newText;
            }
        },
        toggleComplete: (state, action) => {
            const todo = state.todos.find((todo) => todo.id === action.payload);
            if (todo) {
                todo.completed = !todo.completed;
            }
        }
    }
});

export const { addTodo, removeTodo, updateTodo, toggleComplete } = todoSlice.actions;

export default todoSlice.reducer;
